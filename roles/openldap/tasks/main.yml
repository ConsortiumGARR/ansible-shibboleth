---
# tasks file for openldap
- name: "Be sure that the package 'debconf-utils' is installed"
  package: 
   name: "debconf-utils"
   state: latest
  tags: openldap

- name: "Check if debconf-get-selections has parameters for unattended OpenLDAP installation and store the result on 'debconf' ansible variable"
  shell: (debconf-get-selections | grep -q -s slapd); echo $?
  register: debconf
  ignore_errors: yes
  changed_when: false
  tags: openldap

- name: "Be sure that OpenLDAP unattended installation parameters are set correctly"
  debconf:
    name: "slapd"
    question: "{{ item.key }}"
    vtype: "{{ item.type }}"
    value: "{{ item.value }}"
  with_items:
    - key: slapd/password1
      type: password
      value: "{{ ldap_root_pw|default('') }}"
    - key: slapd/password2
      type: password
      value: "{{ ldap_root_pw|default('') }}"
    - key: slapd/move_old_database
      type: boolean
      value: true
    - key: slapd/domain
      type: string
      value: "{{ ldap_domain|default('') }}"
    - key: shared/organization
      type: string
      value: "{{ ldap_org|default('') }}"
    - key: slapd/no_configuration
      type: boolean
      value: false
    - key: slapd/purge_database
      type: boolean
      value: false
    - key: slapd/allow_ldap_v2
      type: boolean
      value: false
    - key: slapd/backend
      type: select
      value: MDB
  when: debconf.stdout == "1"
  tags: openldap

- name: "Be sure that OpenLDAP is installed with its utilities"
  package: 
   name: "{{ item }}"
   state: latest
  with_items:
    - slapd
    - ldap-utils
  tags: openldap

- name: "Be sure that the OpenLDAP user is added to 'ssl-cert' group"
  user: 
   name: openldap
   groups: ssl-cert
  notify:
   - "Restart slapd"
  tags: openldap

- name: "Be sure that the directory '/root/ldap-configs' is present or create it"
  file:
    path: /root/ldap-configs
    state: directory
    mode: 0600
  tags: openldap

- name: "Be sure that the directory configuration LDIFs are stored into /root/ldap-configs"
  template:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "root"
   group: "root"
   mode: "0600"
  with_items:
   - src: "directory-config.ldif.j2"
     dest: "/root/ldap-configs/directory-config.ldif"
   - src: "directory-content.ldif.j2"
     dest: "/root/ldap-configs/directory-content.ldif"
   - src: "passwordpolicy.ldif.j2"
     dest: "/root/ldap-configs/passwordpolicy.ldif"
  tags: openldap 

- name: "Be sure that eduPerson, schac schema and member-overlay are stored into /root/ldap-configs"
  copy:
   src: "files/{{ item }}"
   dest: "/root/ldap-configs"
   owner: "root"
   group: "root"
   mode: "0644"
  with_items:
   - eduperson-201602.ldif
   - schac-20150413.ldif
   - memberof-overlay.ldif
  tags: openldap

- name: "Be sure that 'ldap.conf' is configured correctly"
  copy:
   src: "files/ldap.conf"
   dest: "/etc/ldap/ldap.conf"
   owner: "root"
   group: "root"
   mode: "0644"
  notify:
   - "Restart slapd"
  tags: openldap

- name: "Check if LDAP has alread the olcTLSCertificateKeyFile needed for STARTTLS and store the result on 'olc_cert_key' ansible variable"
  shell: "ldapsearch -H ldapi:// -Y EXTERNAL -b cn=config -LLL -Q '(olcTLSCertificateKeyFile=*)' dn olcTLSCertificateKeyFile | grep olcTLSCertificateKeyFile | wc -l"
  register: olc_cert_key
  changed_when: false
  tags: openldap

- name: "Be sure that SLAPD is restarted before applying new ldap configuration"
  service:
    name: "slapd"
    state: "restarted"
  when: olc_cert_key.stdout == "0"
  tags: openldap

- name: "Be sure that the Directory is configured correctly"
  command: "ldapmodify -Y EXTERNAL -H ldapi:/// -f /root/ldap-configs/directory-config.ldif"
  when: olc_cert_key.stdout == "0"
  notify: 
   - "Restart slapd"
  tags: openldap

- name: "Check memberof overlay into LDAP and store the result on 'memberof_overlay' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=config  olcOverlay=memberof"
  register: memberof_overlay
  changed_when: false
  tags: openldap
  
- name: "Add memberOf overlay to openldap"
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f /root/ldap-configs/memberof-overlay.ldif"
  when: memberof_overlay.stdout == ""
  notify: 
   - "Restart slapd"
  tags: openldap

- name: "Check eduPerson schema on LDAP and store the result on 'eduperson_schema' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=schema,cn=config cn=*eduperson dn"
  register: eduperson_schema
  changed_when: false
  tags: openldap

- name: "Be sure that the eduperson-201602 schema is added"
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f /root/ldap-configs/eduperson-201602.ldif"
  when: eduperson_schema.stdout == ""
  notify: 
   - "Restart slapd"
  tags: openldap

- name: "Check SCHAC schema on LDAP and store the result on 'schac_schema' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=schema,cn=config cn=*schac dn"
  register: schac_schema
  changed_when: false
  tags: openldap

- name: "Be sure that the schac-20150413 schema is added"
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f /root/ldap-configs/schac-20150413.ldif"
  when: schac_schema.stdout == ""
  notify: 
   - "Restart slapd"
  tags: openldap

- name: "Check Password Policy schema on LDAP and store the result on 'ppolicy_schema' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=schema,cn=config cn=*ppolicy dn"
  register: ppolicy_schema
  changed_when: false
  tags: openldap
 
- name: "Be sure that the Password Policy are enabled on OpenLDAP"
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/ppolicy.ldif"
  when: ppolicy_schema.stdout == ""
  notify:
   - "Restart slapd"
  tags: openldap

- name: "Check the existance of branch 'people' inside LDAP and store the result into 'people_in_ldap' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b {{ ldap_basedn }} objectClass=organizationalUnit dn | grep ou=people,{{ ldap_basedn }} | wc -l"
  register: people_in_ldap
  changed_when: false
  tags: openldap

- name: "Check the existance of branch 'groups' inside LDAP and store the result into 'groups_in_ldap' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b {{ ldap_basedn }} objectClass=organizationalUnit dn | grep ou=groups,{{ ldap_basedn }} | wc -l"
  register: groups_in_ldap
  changed_when: false
  tags: openldap

- name: "Check the existance of branch 'system' inside LDAP and store the result into 'system_in_ldap' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b {{ ldap_basedn }} objectClass=organizationalUnit dn | grep ou=system,{{ ldap_basedn }} | wc -l"
  register: system_in_ldap
  changed_when: false
  tags: openldap

- name: "Be sure that Directory contains the standard 'people', 'groups', 'system' branches"
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f /root/ldap-configs/directory-content.ldif"
  when: (people_in_ldap.stdout == "0" and groups_in_ldap.stdout == "0" and system_in_ldap.stdout == "0")
  notify: 
   - "Restart slapd"
  tags: openldap

- name: "Check the existance of branch 'policies' inside LDAP and store the result into 'ppolicy_in_ldap' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b {{ ldap_basedn }} objectClass=organizationalUnit dn | grep ou=policies,{{ ldap_basedn }} | wc -l"
  register: ppolicy_in_ldap
  changed_when: false
  tags: openldap

- name: "Be sure that Password Policy default is configured"
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f /root/ldap-configs/passwordpolicy.ldif"
  when: (ppolicy_in_ldap.stdout == "0")
  notify: 
   - "Restart slapd"
  tags: openldap

- name: "Be sure to create directory needed for backups"
  file:
   dest: "/var/lib/autoldapbackup"
   state: "directory"
   mode: "750"
  tags: openldap

- name: "Be sure to have the autoldapbackup daily CRON job configured"
  copy:
   src: "files/autoldapbackup"
   dest: "/etc/cron.daily/autoldapbackup"
   owner: "root"
   group: "root"
   mode: "0755"
  tags: openldap

- name: "Be sure to have executable of autoldapbackup in the right position"
  template:
   src: "autoldapbackup.sh.j2"
   dest: "/usr/sbin/autoldapbackup"
   owner: "root"
   group: "root"
   mode: "0755"
  tags: openldap 

- name: "RESTORE - Be sure to put the backup into the /root directory"
  copy:
   src: "files/restore/{{ idp_fqdn }}/ldap-backup.gz"
   dest: "/root/ldap-backup.gz"
   owner: "root"
   group: "root"
   mode: "0600"
  when: ldap_restore == "True"
  tags: openldap

- name: "RESTORE - Be sure to extract the LDAP Backup into the right position"
  command: "gunzip /root/ldap-backup.gz"
  when: ldap_restore == "True"
  tags: openldap

- name: "RESTORE - Be sure that the ldap-backup has the right permission"
  file:
   dest: "/root/ldap-backup"
   owner: "root"
   group: "root"
   mode: "600"
  when: ldap_restore == "True"
  tags: openldap

- name: "RESTORE - Check the existance of branch 'people' inside LDAP and store the result into 'people_in_ldap' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b {{ ldap_basedn }} objectClass=organizationalUnit dn | grep ou=people,{{ ldap_basedn }} | wc -l"
  register: people_in_ldap
  changed_when: false
  when: ldap_restore == "True"
  tags: openldap

- name: "RESTORE - Be sure that the branch 'ou=people' is absent"
  command: "ldapdelete -r 'ou=people,{{ ldap_basedn }}' -H ldap://{{ idp_fqdn }} -D '{{ ldap_root_dn }}' -w {{ ldap_root_pw }}"
  when: ldap_restore == "True" and people_in_ldap.stdout == "1"
  tags: openldap

- name: "RESTORE - Be sure to stop SLAPD before to restore entries"
  service:
   name: slapd
   state: stopped
  when: ldap_restore == "True"
  tags: openldap

- name: "RESTORE - Be sure to restore ldap entries"
  command: "slapadd -c -l /root/ldap-backup"
  when: ldap_restore == "True"
  tags: openldap

- name: "RESTORE - Be sure to remove the ldap-backup.ldif restored"
  file:
   dest: "{{ item.dest }}"
   state: "absent"
  with_items:
   - { dest: "/root/ldap-backup.ldif" }
   - { dest: "/root/ldap-backup.gz" }
  when: ldap_restore == "True"
  tags: openldap

- name: "Be sure that OpenLDAP is up and running"
  service: 
   name: slapd
   state: started
   enabled: yes
  tags: openldap

