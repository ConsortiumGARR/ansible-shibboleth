---
# tasks file for idp
- name: "Include OS-specific variables."
  include_vars: "{{ ansible_os_family }}.yml"
  tags: idp

- name: "Include attribute resolver default dictionary if a custom one is not provided on the host_vars of IdP"
  include_vars:
   file: "attr-defs-dict-java{{ jdk_version }}.yml"
  when: idp_attrDef is undefined or idp_attrDef == ""
  tags: idp

- name: "Include shibboleth identity provider variables"
  include_vars: shib-idp-vars.yml
  tags: idp

- name: "Check if Shibboleth IdP directory exists and store the result into 'shib_idp_dir' ansible variable"
  stat:
   path: "/opt/shibboleth-idp"
  register: shib_idp_dir
  changed_when: false
  tags: idp

- name: "Check if Shibboleth IdP tarball exists" 
  stat: 
   path: "/usr/local/src/shibboleth-identity-provider-{{ shib_idp_version }}.tar.gz"
  register: shib_tarball
  tags: idp

- name: "Download Shibboleth IdP and check its SHA256 checksum"
  get_url:
   url: "{{ idp_dl_url }}"
   dest: "/usr/local/src"
   checksum: "sha256:{{ shib_idp_checksum }}"
  when:
   - shib_tarball.stat.exists == False
  tags: idp

- name: "Be sure that the Shibboleth Identity Provider is downloaded and extracted into the right position"
  unarchive:
   src: "/usr/local/src/shibboleth-identity-provider-{{ shib_idp_version }}.tar.gz"
   dest: "/usr/local/src"
   owner: "root"
   group: "root"
   remote_src: yes
  when: 
   - shib_idp_dir.stat.isdir is undefined
  tags: idp

- name: "Be sure that the Shibboleth Identity Provider installer properties' files exists in the right position"
  template:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "root"
   group: "root"
   mode: "{{ item.mode }}"
  with_items:
   - { src: "shib-idp-install.properties.j2", dest: "/tmp/shib-idp-install.properties", mode: "0644" }
   - { src: "installer.properties.j2", dest: "/tmp/installer.properties", mode: "0644" } 
   - { src: "shib-idp-persistentId-db.sql.j2", dest: "/root/shib-idp-persistentId-db.sql", mode: "0600" }
  when: 
   - shib_idp_dir.stat.isdir is undefined
  tags: idp

- name: "Be sure to load JSTL libraries for Shibboleth IdP Status page"
  copy:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "root"
   group: "root"
   mode: 0644
  with_items:
   - { src: "files/jstl-1.2.jar", dest: "/usr/local/src/shibboleth-identity-provider-{{ shib_idp_version }}/webapp/WEB-INF/lib/jstl-1.2.jar" }
  tags: idp 

- name: "Be sure that Shibboleth IdP has the right libraries"
  file:
   src: "{{ item.src }}" 
   dest: "{{ item.dest }}"
   owner: "jetty"
   group: "jetty"
   state: link
  with_items:
   - { src: '/usr/share/java/commons-dbcp.jar' ,dest: "/usr/local/src/shibboleth-identity-provider-{{ shib_idp_version }}/webapp/WEB-INF/lib/common-dbcp.jar" }
   - { src: '/usr/share/java/commons-pool.jar' ,dest: "/usr/local/src/shibboleth-identity-provider-{{ shib_idp_version }}/webapp/WEB-INF/lib/commons-pool.jar" }
   - { src: '/usr/share/java/mysql.jar' ,dest: "/usr/local/src/shibboleth-identity-provider-{{ shib_idp_version }}/webapp/WEB-INF/lib/mysql-connector-java.jar" }
  tags: idp

- name: "Be sure to install Shibboleth IdP"
  shell: "./install.sh -Didp.property.file=/tmp/installer.properties"
  args:
    chdir: "/usr/local/src/shibboleth-identity-provider-{{ shib_idp_version }}/bin"
  environment:
    JAVA_HOME: "{{ java_home_dir }}"
  when: shib_idp_dir.stat.isdir is undefined
  tags: idp

- name: "Be sure that the Shibboleth IdP directories have right permissions"
  file:
   path: "/opt/shibboleth-idp/{{ item }}"
   owner: "jetty"
   recurse: "yes"
   state: directory
  with_items:
    - "logs"
    - "metadata"
    - "credentials"
    - "conf"
    - "system"
    - "war"
  tags: idp

- name: "Be sure to set the credentials generated for Shibboleth IdP"
  copy:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "jetty"
   group: "root"
   mode: "{{ item.mode }}"
  with_items:
   - { src: "files/restore/{{ fqdn }}/credentials/idp-signing.crt", dest: "/opt/shibboleth-idp/credentials/idp-signing.crt", mode: "0644" }
   - { src: "files/restore/{{ fqdn }}/credentials/idp-signing.key", dest: "/opt/shibboleth-idp/credentials/idp-signing.key", mode: "0600" }
   - { src: "files/restore/{{ fqdn }}/credentials/idp-encryption.crt", dest: "/opt/shibboleth-idp/credentials/idp-encryption.crt", mode: "0644" }
   - { src: "files/restore/{{ fqdn }}/credentials/idp-encryption.key", dest: "/opt/shibboleth-idp/credentials/idp-encryption.key", mode: "0600" }
   - { src: "files/restore/{{ fqdn }}/credentials/idp-backchannel.crt", dest: "/opt/shibboleth-idp/credentials/idp-backchannel.crt", mode: "0644" }
   - { src: "files/restore/{{ fqdn }}/credentials/idp-backchannel.p12", dest: "/opt/shibboleth-idp/credentials/idp-backchannel.p12", mode: "0644" }
   - { src: "files/restore/{{ fqdn }}/credentials/sealer.jks", dest: "/opt/shibboleth-idp/credentials/sealer.jks", mode: "0644" }
   - { src: "files/restore/{{ fqdn }}/credentials/sealer.kver", dest: "/opt/shibboleth-idp/credentials/sealer.kver", mode: "0644" }
  tags: idp

- name: "Check if 'shibboleth' DB is already created and store the result into 'shib_db' ansible variable"
  command: mysql -u root -s -N -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='shibboleth'"
  register: shib_db
  changed_when: false
  tags: idp

- name: "Be sure that the persistent identifiers 'shibboleth' database is created"
  mysql_db:
   encoding: "utf8"
   state: import
   name: all
   target: "/root/shib-idp-persistentId-db.sql"
  when: shib_db.stdout != 'shibboleth' 
  tags: idp

- name: "Save the 'idp-signing.crt' value for IDP Metadata"
  command: "cat /opt/shibboleth-idp/credentials/idp-signing.crt"
  register: idp_signing_cert
  changed_when: false
  tags: idp

- name: "Save the 'idp-encryption.crt' value for IDP Metadata"
  command: "cat /opt/shibboleth-idp/credentials/idp-encryption.crt"
  register: idp_encryption_cert
  changed_when: false
  tags: idp

- name: "Save the 'idp-backchannel.crt' value for IDP Metadata"
  command: "cat /opt/shibboleth-idp/credentials/idp-backchannel.crt"
  register: idp_backchannel_cert
  changed_when: false
  tags: idp

- name: "Be sure to create 'css' directory needed by Login Page"
  file:
   path: "/var/www/html/css"
   state: directory
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure that IdP configurations files are present - Part 1"
  template:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "jetty"
   group: "root"
   mode: "0600"
  with_items:
   - { src: "conf/saml-nameid.properties.j2", dest: "/opt/shibboleth-idp/conf/saml-nameid.properties" }
   - { src: "conf/global.xml.j2", dest: "/opt/shibboleth-idp/conf/global.xml" }
   - { src: "conf/idp.properties.j2", dest: "/opt/shibboleth-idp/conf/idp.properties" }
   - { src: "conf/ldap.properties.j2", dest: "/opt/shibboleth-idp/conf/ldap.properties" }
   - { src: "conf/services.xml.j2", dest: "/opt/shibboleth-idp/conf/services.xml" }
   - { src: "conf/attribute-filter-v3-federation.xml.j2", dest: "/opt/shibboleth-idp/conf/attribute-filter-v3-federation.xml" }
   - { src: "conf/attribute-resolver-v3-custom.xml.j2", dest: "/opt/shibboleth-idp/conf/attribute-resolver-v3-custom.xml" }
   - { src: "conf/metadata-providers.xml.j2", dest: "/opt/shibboleth-idp/conf/metadata-providers.xml" }
  tags: idp

- name: "Be sure to configure correctly the IdP Metadata"
  template:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "jetty"
   group: "root"
   mode: "0600"
  with_items:
   - { src: "idp-metadata.xml.j2", dest: "/opt/shibboleth-idp/metadata/idp-metadata.xml" }
  tags: idp

- name: "Be sure to configure correctly Apache2 to enable Shibboleth IdP application"
  template:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "root"
   group: "root"
   mode: "0600"
  with_items:
   - { src: "idp.conf.j2", dest: "/etc/apache2/conf-enabled/idp.conf" }
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure to download Metadata files and put them into the right directory"
  get_url:
   url: "{{ item.url }}"
   dest: "/opt/shibboleth-idp/metadata/{{ item.file }}"
   owner: "jetty"
   group: "root"
   mode: "0644"
   validate_certs: "{{ item.disregardTLSCertificate }}"
  with_items: "{{ idp_metadata_providers }}"
  tags: idp

- name: "Be sure that IdP configurations files are present - Part 2"
  copy:
   src: "files/conf/"
   dest: "/opt/shibboleth-idp/conf/"
   owner: "jetty"
   group: "root"
   mode: "0600"
  tags: idp

- name: "Be sure that IdP supports OpenLDAP Password Policy - Part 1"
  copy:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "{{ item.owner }}"
   group: "{{ item.group }}"
   mode: "{{ item.mode }}"
  with_items:
   - { src: "files/conf/authn/password-authn-config.xml", dest: "/opt/shibboleth-idp/conf/authn/password-authn-config.xml", owner: "jetty", group: "root", mode: "0600" }
   - { src: "files/conf/authn/ldap-authn-config.xml", dest: "/opt/shibboleth-idp/conf/authn/ldap-authn-config.xml", owner: "jetty", group: "root", mode: "0600" }
   - { src: "files/flows/authn/conditions/conditions-flow.xml", dest: "/opt/shibboleth-idp/flows/authn/conditions/conditions-flow.xml", owner: "root", group: "root", mode: "0755" }
   - { src: "files/views/login-error.vm", dest: "/opt/shibboleth-idp/views/login-error.vm", owner: "root", group: "root", mode: "0644" }
  when:
   - idp is defined
   - idp['ldap'] is defined
   - idp['ldap']['ppolicy'] is defined
   - idp['ldap']['ppolicy']['change_password_url'] is defined
   - idp['ldap']['ppolicy']['change_password_url'] != ""
  tags: idp

- name: "Be sure that 'change-password' directory is created"
  file:
   dest: "/opt/shibboleth-idp/flows/authn/conditions/change-password"
   owner: "root"
   group: "root"
   mode: "0755"
   state: directory
  when:
   - idp is defined
   - idp['ldap'] is defined
   - idp['ldap']['ppolicy'] is defined
   - idp['ldap']['ppolicy']['change_password_url'] is defined
   - idp['ldap']['ppolicy']['change_password_url'] != ""
  tags: idp

- name: "Copy Expired password flow to Change password flow"
  copy:
   src: "/opt/shibboleth-idp/flows/authn/conditions/expired-password/expired-password-flow.xml"
   dest: "/opt/shibboleth-idp/flows/authn/conditions/change-password/change-password-flow.xml"
   owner: root
   group: root
   mode: 0755
   remote_src: "True"
  when:
   - idp is defined
   - idp['ldap'] is defined
   - idp['ldap']['ppolicy'] is defined
   - idp['ldap']['ppolicy']['change_password_url'] is defined
   - idp['ldap']['ppolicy']['change_password_url'] != ""
  tags: idp

- name: "Be sure that Federation logo, eduGAIN logo and other images are present"
  copy:
   src: "files/restore/{{ fqdn }}/styles/images"
   dest: "/var/www/html/"
   owner: "root"
   group: "root"
   mode: "0644"
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure that IdP image files are present"
  copy:
   src: "files/restore/{{ fqdn }}/styles/{{ item.key }}/"
   dest: "/var/www/html/{{ item.key }}/"
   owner: "root"
   group: "root"
   mode: "0644"
  with_dict: "{{ idp_metadata }}"
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure that default english messages and IdP style files are present"
  template:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "root"
   group: "root"
   mode: "0644"
  with_items:
   - { src: "views/login.css.j2", dest: "/var/www/html/css/login.css" }
   - { src: "views/consent.css.j2", dest: "/var/www/html/css/consent.css" }
   - { src: "views/login.vm.j2", dest: "/opt/shibboleth-idp/views/login.vm" }
   - { src: "views/logout.vm.j2", dest: "/opt/shibboleth-idp/views/logout.vm" }
   - { src: "views/logout-complete.vm.j2", dest: "/opt/shibboleth-idp/views/logout-complete.vm" }
   - { src: "views/logout-propagate.vm.j2", dest: "/opt/shibboleth-idp/views/logout-propagate.vm" }
   - { src: "views/intercept/attribute-release.vm.j2", dest: "/opt/shibboleth-idp/views/intercept/attribute-release.vm" }
   - { src: "messages/cookie_policy.properties.j2", dest: "/opt/shibboleth-idp/messages/cookie_policy.properties" }
   - { src: "messages/custom.properties.j2", dest: "/opt/shibboleth-idp/messages/custom.properties" }
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure that messages for interested languages are present"
  copy:
   src: "files/messages/messages_{{ item.key }}.properties"
   dest: "/opt/shibboleth-idp/messages/messages_{{ item.key }}.properties"
   owner: "root"
   group: "root"
   mode: "0644"
  with_dict: "{{ idp_metadata }}"
  when: "item.key != 'en'"
  tags: idp

- name: "Be sure that custom messages for interested languages are present"
  template:
   src: "messages/custom_{{ item.key }}.properties.j2"
   dest: "/opt/shibboleth-idp/messages/custom_{{ item.key }}.properties"
   owner: "root"
   group: "root"
   mode: "0644"
  with_dict: "{{ idp_metadata }}"
  when: "item.key != 'en'"
  tags: idp

- name: "Be sure that cookie_policy messages for interested languages are present"
  template:
   src: "messages/cookie_policy_{{ item.key }}.properties.j2"
   dest: "/opt/shibboleth-idp/messages/cookie_policy_{{ item.key }}.properties"
   owner: "root"
   group: "root"
   mode: "0644"
  with_dict: "{{ idp_metadata }}"
  when: "item.key != 'en'"
  tags: idp

- name: "Be sure that Information Page for interested languages are present"
  template:
   src: "styles/{{ item.key }}/info.html.j2"
   dest: "/var/www/html/{{ item.key }}/info.html"
   owner: "root"
   group: "root"
   mode: "0644"
  with_dict: "{{ idp_metadata }}"
  when:
   - idp is defined
   - idp['login'] is defined
   - idp['login']['create_info_and_pp_pages'] is defined
   - idp['login']['create_info_and_pp_pages'] in ["True","true","Yes","yes"]
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure that Privacy Policy Page for interested languages are present"
  template:
   src: "styles/{{ item.key }}/privacy.html.j2"
   dest: "/var/www/html/{{ item.key }}/privacy.html"
   owner: "root"
   group: "root"
   mode: "0644"
  with_dict: "{{ idp_metadata }}"
  when: 
   - idp is defined
   - idp['login'] is defined
   - idp['login']['create_info_and_pp_pages'] is defined
   - idp['login']['create_info_and_pp_pages'] in ["True","true","Yes","yes"]
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure to remove Privacy Policy Page if already ones are provided"
  file:
   dest: "/var/www/html/{{ item.key }}/privacy.html"
   state: "absent"
  with_dict: "{{ idp_metadata }}"
  when: 
   - idp is defined
   - idp['login'] is defined
   - idp['login']['create_info_and_pp_pages'] is not defined or idp['login']['create_info_and_pp_pages'] in ["No","no","False","false"]
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure to remove Information Page if already ones are provided"
  file:
   dest: "/var/www/html/{{ item.key }}/info.html"
   state: "absent"
  with_dict: "{{ idp_metadata }}"
  when: 
   - idp is defined
   - idp['login'] is defined
   - idp['login']['create_info_and_pp_pages'] is undefined or idp['login']['create_info_and_pp_pages'] in ["No","no","False","false"]
  notify:
   - "Restart Apache"
  tags: idp

- name: "Debian 8 - Be sure that needed packages for statistics are installed"
  apt:
   name: "{{item}}"
   state: latest
   update_cache: yes
  with_items:
   - python-mysqldb
   - php5-mysql
   - php5
  when:
   - ansible_distribution_release == "jessie" 
  tags: idp

#- name: "Debian 9 - Be sure that needed packages for statistics are installed"
#   apt:
#   name: "{{item}}"
#   state: latest
#   update_cache: yes
#  with_items:
#   - python-mysqldb
#   - php7.0-mysql
#   - php7.0-xml
#   - php7.0
#  when:
#   - ansible_distribution_release == "stretch" 
#  tags: idp

- name: "Check if 'statistics' DB is already created and store the result into 'statistics_db' ansible variable"
  command: mysql -u root -s -N -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='statistics'"
  register: statistics_db
  changed_when: false
  tags: idp

- name: "Be sure that 'loganalysis' directory is created"
  file:
   dest: "/opt/loganalysis"
   owner: "root"
   group: "root"
   mode: "0644" 
   state: directory
  tags: idp

- name: "Be sure that 'statistics' directory is created"
  file:
   dest: "/var/www/html/statistics"
   owner: "root"
   group: "root"
   mode: "0755" 
   state: directory
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure that the needed files for statistics application are in the right place - Part 1"
  template:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "root"
   group: "root"
   mode: "{{ item.mode }}"
  with_items:
   - { src: "statistics/statistics-idp-db.sql.j2", dest: "/root/statistics-idp-db.sql", mode: "0600" }
   - { src: "statistics/dbanalysis.py.j2", dest: "/opt/loganalysis/dbanalysis.py", mode: "0600" }
   - { src: "statistics/config.php.j2", dest: "/opt/loganalysis/config.php", mode: "0644" }
   - { src: "statistics/insertSP.php.j2", dest: "/opt/loganalysis/insertSP.php", mode: "0644" }
   - { src: "statistics/IDProvider.conf.php.j2", dest: "/opt/loganalysis/IDProvider.conf.php", mode: "0644" }
   - { src: "statistics/db.php.j2", dest: "/var/www/html/statistics/db.php", mode: "0644" }
  tags: idp

- name: "Be sure that the 'statistics' database is created"
  mysql_db:
   encoding: "utf8"
   state: import
   name: all
   target: "/root/statistics-idp-db.sql"
  when: statistics_db.stdout != 'statistics'
  tags: idp

- name: "Be sure that the needed files for statistics application are in the right place - Part 2"
  copy:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "{{ item.owner }}"
   group: "{{ item.group }}"
   mode: "{{ item.mode }}"
  with_items:
   - { src: "files/statistics/conf/", dest: "/opt/loganalysis/", owner: "root", group: "root", mode: "0644" }
   - { src: "files/statistics/cron/cron-idp-stats", dest: "/etc/cron.daily/cron-idp-stats", owner: "root", group: "root", mode: "0755" }
   - { src: "files/statistics/apache/idp-stats.conf", dest: "/etc/apache2/conf-enabled/idp-stats.conf", owner: "root", group: "root", mode: "0644" }
  notify:
   - "Restart Apache"
  tags: idp

- name: "Be sure that needed metadata file is linked correctly"
  file:
   src: "/opt/shibboleth-idp/metadata/{{ fed_md }}"
   dest: "/opt/loganalysis/{{ fed_md }}"
   owner: "root"
   group: "root"
   state: "link"
  tags: idp

- name: "Be sure to put the Statistic Web Application in the right place"
  copy:
   src: "files/statistics/apache/www/"
   dest: "/var/www/html/statistics/"
   owner: "root"
   group: "root"
   mode: "0644"
  notify:
   - "Restart Apache"
  tags: idp

- name: "RESTORE - Be sure that 'shibboleth' database is empty"
  shell: "mysql shibboleth -e 'SELECT * FROM shibpid' | wc -l"
  register: shibboleth_db_is_empty
  changed_when: false
  tags: idp

- name: "RESTORE - Be sure that 'statistics' database is empty"
  shell: "mysql statistics -e 'SELECT * FROM sps' | wc -l"
  register: statistics_db_is_empty
  changed_when: false
  tags: idp

- name: "RESTORE - Be sure to put backups into the /root directory"
  copy:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "root"
   group: "root"
   mode: "0600"
  with_items:
   - { src: "files/restore/{{ fqdn }}/mysql-backup/shibboleth-db.sql.gz", dest: "/root/shibboleth-db.sql.gz" }
   - { src: "files/restore/{{ fqdn }}/mysql-backup/statistics-db.sql.gz", dest: "/root/statistics-db.sql.gz" }
  when: 
   - idp_db_restore is defined
   - idp_db_restore in ["True","true","Yes","yes"] 
   - shibboleth_db_is_empty.stdout == "0" and statistics_db_is_empty.stdout == "0"
  tags: idp

- name: "RESTORE - Be sure to extract Databases Backup into the right position"
  command: "gunzip {{ item }}"
  with_items:
   - "/root/shibboleth-db.sql.gz"
   - "/root/statistics-db.sql.gz"
  when: 
   - idp_db_restore is defined
   - idp_db_restore in ["True","true","Yes","yes"] 
   - shibboleth_db_is_empty.stdout == "0" and statistics_db_is_empty.stdout == "0"
  tags: idp

- name: "RESTORE - Be sure that Databases Backup have the right permission"
  file:
   dest: "{{ item }}"
   owner: "root"
   group: "root"
   mode: "600"
  with_items:
   - "/root/shibboleth-db.sql"
   - "/root/statistics-db.sql"
  when: 
   - idp_db_restore is defined
   - idp_db_restore in ["True","true","Yes","yes"] 
   - shibboleth_db_is_empty.stdout == "0" and statistics_db_is_empty.stdout == "0"
  tags: idp

- name: "RESTORE - Be sure to restore databases"
  mysql_db:
   encoding: "utf8"
   state: import
   name: all
   target: "{{ item }}"
  with_items:
   - "/root/shibboleth-db.sql"
   - "/root/statistics-db.sql"
  when: 
   - idp_db_restore is defined
   - idp_db_restore in ["True","true","Yes","yes"] 
   - shibboleth_db_is_empty.stdout == "0" and statistics_db_is_empty.stdout == "0"
  tags: idp

- name: "RESTORE - Be sure to remove the restored files"
  file:
   dest: "{{ item }}"
   state: "absent"
  with_items:
   - "/root/shibboleth-db.sql"
   - "/root/statistics-db.sql"
  when: 
   - idp_db_restore is defined
   - idp_db_restore in ["True","true","Yes","yes"] 
   - shibboleth_db_is_empty.stdout == "0" and statistics_db_is_empty.stdout == "0"
  tags: idp

- name: "Be sure to configure Jetty to load IdP war file correctly"
  copy:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "root"
   group: "root"
   mode: 0644
  with_items:
   - { src: "files/idp.xml", dest: "/opt/jetty/webapps/idp.xml" }
  tags: idp 

- name: "Be sure that needed packages for Check MK plugins are installed"
  apt:
   name: "{{ item }}"
   state: latest
   update_cache: yes
  with_items:
   - "python-ldap"
  when: 
   - check_mk is defined
   - check_mk['srv'] is defined
  tags: idp

- name: "Be sure that the Check_MK plugin directory exists"
  file:
   path: "/usr/lib/check_mk_agent/local"
   owner: "root"
   group: "root"
   state: directory
  when:
   - check_mk is defined
   - check_mk['srv'] is defined
  tags: idp

- name: "Be sure that the Check_MK 'check_aacli' and 'check_mysql' plugin are installed in the right position"
  template:
   src: "{{ item['src'] }}"
   dest: "{{ item['dest'] }}"
   owner: "root"
   group: "root"
   mode: "0755"
  with_items:
   - { src: "monitoring/check_mk_plugins/check_aacli.py.j2", dest: "/usr/lib/check_mk_agent/local/check_aacli.py" }
   - { src: "monitoring/check_mk_plugins/check_mysql.py.j2", dest: "/usr/lib/check_mk_agent/local/check_mysql.py" }
  when:
   - check_mk is defined
   - check_mk['srv'] is defined
  tags: idp

- name: "Be sure that the Check_MK 'check_ldap' plugin is installed in the right position"
  template:
   src: "monitoring/check_mk_plugins/check_ldap.py.j2"
   dest: "/usr/lib/check_mk_agent/local/check_ldap.py"
   owner: "root"
   group: "root"
   mode: "0755"
  when:
   - check_mk is defined
   - check_mk['srv'] is defined
   - ldap is defined
   - ldap['create_test_user'] is defined
   - ldap['create_test_user'] in ["Yes","yes","True","true"]
  tags: idp

- name: "Be sure that the Check_MK 'check_rs' plugin is installed in the right position"
  template:
   src: "monitoring/check_mk_plugins/check_rs.py.j2"
   dest: "/usr/lib/check_mk_agent/local/check_rs.py"
   owner: "root"
   group: "root"
   mode: "0755"
  when:
   - check_mk is defined
   - check_mk['srv'] is defined
   - check_mk['check_rs'] is defined
   - check_mk['check_rs'] in ["Yes","yes","True","true"]
  tags: idp

- name: "Be sure that the Fake RS SP Metadata is in the right place"
  copy:
   src: "files/metadata/fake-rs-sp.xml"
   dest: "/opt/shibboleth-idp/metadata/fake-rs-sp.xml"
   owner: "jetty"
   group: "root"
   mode: 0644
  when:
   - check_mk is defined
   - check_mk['srv'] is defined
   - check_mk['check_rs'] is defined
   - check_mk['check_rs'] in ["Yes","yes","True","true"]
  tags: idp 

- name: "Be sure that the Check_MK 'check_coco' plugin is installed in the right position"
  template:
   src: "monitoring/check_mk_plugins/check_coco.py.j2"
   dest: "/usr/lib/check_mk_agent/local/check_coco.py"
   owner: "root"
   group: "root"
   mode: "0755"
  when: 
   - check_mk is defined
   - check_mk['srv'] is defined
   - check_mk['check_coco'] is defined
   - check_mk['check_coco'] in ["Yes","yes","True","true"]
  tags: idp

- name: "Be sure that the Fake CoCo SP Metadata is in the right place"
  copy:
   src: "files/metadata/fake-coco-sp.xml"
   dest: "/opt/shibboleth-idp/metadata/fake-coco-sp.xml"
   owner: "jetty"
   group: "root"
   mode: 0644
  when: 
   - check_mk is defined
   - check_mk['srv'] is defined
   - check_mk['check_coco'] is defined
   - check_mk['check_coco'] in ["Yes","yes","True","true"]
  tags: idp

- name: "Be sure to remove Fake CoCo SP files if 'check_coco' is negative" 
  file:
   dest: "{{ item }}"
   state: "absent"
  with_items:
   - "/usr/lib/check_mk_agent/local/check_coco.py"
   - "/opt/shibboleth-idp/metadata/fake-coco-sp.xml"
  when: 
   - check_mk is defined
   - check_mk['srv'] is not defined or check_mk['check_coco'] is not defined or check_mk['check_coco'] in ["No","no","False","false"]
  tags: idp

- name: "Be sure to remove Fake RS SP files if 'check_rs' is negative" 
  file:
   dest: "{{ item }}"
   state: "absent"
  with_items:
   - "/usr/lib/check_mk_agent/local/check_rs.py"
   - "/opt/shibboleth-idp/metadata/fake-rs-sp.xml"
  when: 
   - check_mk is defined
   - check_mk['srv'] is not defined or check_mk['check_rs'] is not defined or check_mk['check_rs'] in ["No","no","False","false"]
  tags: idp

- name: "Be sure to install backports APT repository"
  apt_repository:
    repo: "deb {{ mirror }} {{ ansible_distribution_release}}-backports main"
    state: present
    update_cache: "yes"
    filename: '{{ ansible_distribution_release }}-backports'
  when:
   - ansible_distribution_release == "jessie"
   - idp is defined
   - idp['rsyslog_srv'] is defined
   - idp['rsyslog_srv']['ip'] is defined 
   - idp['rsyslog_srv']['ip'] != ""
   - idp['rsyslog_srv']['port'] is defined
   - idp['rsyslog_srv']['port'] != ""

- name: "Be sure to install rsyslog with RELP from backports to centralized logs on a remote server"
  apt:
   name: "{{ item }}"
   state: latest
   update_cache: "yes"
   default_release: "{{ ansible_distribution_release }}-backports"
  with_items:
   - "rsyslog"
   - "rsyslog-relp"
  when: 
   - ansible_distribution_release == "jessie"
   - idp is defined
   - idp['rsyslog_srv'] is defined
   - idp['rsyslog_srv']['ip'] is defined 
   - idp['rsyslog_srv']['ip'] != ""
   - idp['rsyslog_srv']['port'] is defined
   - idp['rsyslog_srv']['port'] != ""

- name: "Be sure to configure Rsyslog to send logs to a centralized remote server"
  template:
   src: "monitoring/rsyslog/22-idpcloud.conf.j2"
   dest: "/etc/rsyslog.d/22-idpcloud.conf"
   owner: "root"
   group: "root"
   mode: "0644"
  when:
   - idp is defined
   - idp['rsyslog_srv'] is defined
   - idp['rsyslog_srv']['ip'] is defined 
   - idp['rsyslog_srv']['ip'] != ""
   - idp['rsyslog_srv']['port'] is defined
   - idp['rsyslog_srv']['port'] != ""
  register: rsyslog_template
  tags: idp

- name: "Restart Rsyslog to start sending logs to the centralized remote server"
  service:
   name: rsyslog
   state: restarted
  when:
   - rsyslog_template.changed 
  tags: idp
